import os
from collections import namedtuple
import telegram
from gmusicapi import Mobileclient, session


PLAYLIST_NAME = 'autogenerated'


def get_user_whitelist():
    return os.environ["WHITELIST"].split(" ")


def get_playlist(api):
    user_playlists = [
        playlist for playlist in api.get_all_playlists() if playlist['name'] == PLAYLIST_NAME]
    if len(user_playlists) == 0:
        return api.create_playlist('autogenerated')
    return user_playlists[0]['id']


def get_oauth_info(client_id, client_secret):
    Info = namedtuple("Info", ["client_id", "client_secret"])
    return Info(client_id, client_secret)


def get_bot():
    return telegram.Bot(token=os.environ["TELEGRAM_TOKEN"])



def reply_to_suggester(chat_id, result):
    response_1 = f"""Added the song '{result['song']}' by '{result['artist']}' to playlist.
                     https://play.google.com/music/listen?u=0#/pl/{result['playlist']}"""
    response_2 = "Many thanks! :)"
    get_bot().sendMessage(chat_id=chat_id, text=response_1)
    get_bot().sendMessage(chat_id=chat_id, text=response_2)


def notify_owner(owner_id, suggester_username, result):
    response = f"{suggester_username} :  {result['song']} - {result['artist']}"
    get_bot().sendMessage(chat_id=owner_id, text=response)


def get_api_via_refresh_auth():
    api = Mobileclient()
    # api.oauth_login(GMUSIC_LOGIN)
    gmusic_login = os.environ["GMUSIC_LOGIN"]
    refresh_token = os.environ["REFRESH_TOKEN"]
    client_id = os.environ["CLIENT_ID"]
    client_secret = os.environ["CLIENT_SECRET"]
    oauth_info = get_oauth_info(client_id, client_secret)
    credentials = session.credentials_from_refresh_token(refresh_token, oauth_info)
    api.oauth_login(gmusic_login, credentials)
    return api


def add_to_playlist(api, query):
    search_results = api.search(query)
    if not search_results['song_hits']:
        return None
    song = search_results['song_hits'][0]['track']
    playlist = get_playlist(api)
    api.add_songs_to_playlist(playlist, song['storeId'])
    return {'song': song['title'], 'artist': song['artist'], 'playlist': playlist}


def webhook(request):
    owner_id = int(os.environ["OWNER_ID"])
    user_whitelist = get_user_whitelist()

    if request.method == "POST":
        update = telegram.Update.de_json(request.get_json(force=True), get_bot())
        if update.message.from_user.username not in user_whitelist:
            return None
        chat_id = update.message.chat.id
        api = get_api_via_refresh_auth()
        result = add_to_playlist(api, update.message.text)
        reply_to_suggester(chat_id, result)
        notify_owner(owner_id, update.message.from_user.username, result)
    return "ok"
